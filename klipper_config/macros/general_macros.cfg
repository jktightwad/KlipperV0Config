[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
    {% set retract = 5 %}
    #status_busy
    M107
    M140 S{BED_TEMP}                         ; set bed final temp
    M190 S{BED_TEMP}                         ; wait for bed final temp
    {% if "z" not in printer.toolhead.homed_axes %}
          G28                         ;Only G28 Home if needed
    {% endif %}

    #G1 Z20 F3000                   ; move nozzle away from bed
    #status_heating
    M117 Heating..
    M104 S{EXTRUDER_TEMP}
    M109 S{EXTRUDER_TEMP}             ; Set and wait for nozzle to reach temperature
  
    G1 F9000
    G1 X20 Y5 Z5 F3000
    G92 E0
    G0 Z0.2
    G1 E10 F600  
    G1 X90 Y5 E17 F1000
    G92 E0
    G1 X90 Y5 F5000
    G91                           ; relative positioning
    G0 Z10 F1000                  ; Raise nozzle
    G90
    
    #G0 F200 E8 ; Un-retract
    #G92 E0                         ; zero the extruder
    #M117 Intro Line..
    #PURGE_LINE
    #M117 Printing..
    #status_printing
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    M220 S100                      ; reset print speed override to 100% 
    M221 S100               ; reset extrude factor override to 100% 
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y-10} F3600          ; park nozzle at rear
	
[gcode_macro LOAD_FILAMENT]
gcode:
    #status_busy
    M83                            ; set extruder to relative
    G1 E30 F300                    ; load
    G1 E15 F150                    ; prime nozzle with filament
    M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    #status_busy
    M83                            ; set extruder to relative
    G1 E10 F300                    ; extrude a little to soften tip
    G1 E-40 F1800                  ; retract some, but not too much or it will jam
    M82                            ; set extruder to absolute

[gcode_macro PURGE_LINE]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28                             ;Only G28 Home if needed
    {% endif %}
    G0 X10 Y3 Z0.2 F9000         ; Move to start position
    G92 E0                        ; Reset Extruder
    G1 E10 F600                   ; Extrude a little
    G1 X100 E20 F1000              ; Draw line
    G92 E0                        ; Reset Extruder
    G91                           ; relative positioning
    G0 Z10 F1000                  ; Raise nozzle
    G90

# Compare the GET_POSITION output before and after, see if you skipped steps. IIRC you want the "mcu" line to show within 16 before and after (a full step)
[gcode_macro SPEED_TEST]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    {% set da = params.DIAGONAL_ACCEL|default(34000)|int %}
    {% set la = params.LINEAR_ACCEL|default(68000)|int %}

    {% set boarder_delta = 20 %}

    {% set min_x = 0 + boarder_delta %}
    {% set min_y = 0 + boarder_delta %}
    {% set max_x = 120 - boarder_delta %}
    {% set max_y = 120 - boarder_delta %}

    SAVE_GCODE_STATE NAME=SPEED_TEST
    #status_busy
    G28 X Y
    GET_POSITION
    G90
    {% for iteration in range(i|int) %}
        G1 X{min_x} Y{min_y} F{da}
        G1 X{max_x} Y{max_y} F{da}
        G1 X{min_x} Y{min_y} F{da}
        G1 X{max_x} Y{max_y} F{da}

        G1 X{min_x} Y{max_y} F{la}

        G1 X{max_x} Y{min_y} F{da}
        G1 X{min_x} Y{max_y} F{da}
        G1 X{max_x} Y{min_y} F{da}
        G1 X{min_x} Y{max_y} F{da}

        G1 X{min_x} Y{min_y} F{la}
        G1 X{max_x} Y{min_y} F{la}
        G1 X{max_x} Y{max_y} F{la}
        G1 X{min_x} Y{max_y} F{la}
        G1 X{min_x} Y{min_y} F{la}
    {% endfor %}
    G28 X Y
    GET_POSITION
    RESTORE_GCODE_STATE NAME=SPEED_TEST

[gcode_macro M600]
gcode:
    {% set X = params.X|default(5)|float %}
    {% set Y = params.Y|default(5)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

    ## MailsailOS Macros  
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(5) %}      #edit to your park position
    {% set y = params.Y|default(5) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}
    
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    M220 S100                      ; reset print speed override to 100% 
    M221 S100               ; reset extrude factor override to 100% 
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    #status_ready

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	#status_busy
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

# run repeated Probe Accuracy tests, docking between each to see if Z is drifting
[gcode_macro Probe_Accuracy_Repeats]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    SAVE_GCODE_STATE NAME=REPEATS_TEST
    {% for iteration in range(i|int) %}
        probe_accuracy
    {% endfor %}
    RESTORE_GCODE_STATE NAME=REPEATS_TEST

[gcode_macro DEFINE_OBJECT]
gcode: EXCLUDE_OBJECT_DEFINE {rawparams}

[gcode_macro START_CURRENT_OBJECT]
gcode: EXCLUDE_OBJECT_START NAME={params.NAME}

[gcode_macro END_CURRENT_OBJECT]
gcode: EXCLUDE_OBJECT_END {% if params.NAME %}NAME={params.NAME}{% endif %}

[gcode_macro LIST_OBJECTS]
gcode: EXCLUDE_OBJECT_DEFINE

[gcode_macro LIST_EXCLUDED_OBJECTS]
gcode: EXCLUDE_OBJECT

[gcode_macro REMOVE_ALL_EXCLUDED]
gcode: EXCLUDE_OBJECT RESET=1

[gcode_macro M204]
rename_existing: M99204
gcode:
    # Parameters
    {% set ACCEL = params.S|int %}
    SET_VELOCITY_LIMIT ACCEL={ACCEL} ACCEL_TO_DECEL={ACCEL/2}